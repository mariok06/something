def binary_to_decimal(b):
    return int(b, 2)

def decimal_to_binary(n, bits):
    return format(n if n >= 0 else (1 << bits) + n, f'0{bits}b')

def restoring_division(dividend, divisor, bits):
    # Convert binary strings to integers
    Q = binary_to_decimal(dividend)
    M = binary_to_decimal(divisor)
    
    A = 0  # Accumulator
    
    print(f"Initial Values:")
    print(f"A = {decimal_to_binary(A, bits)}")
    print(f"Q = {decimal_to_binary(Q, bits)}")
    print(f"M = {decimal_to_binary(M, bits)}")
    print("-" * 40)
    
    for i in range(bits):
        # Step 1: Left shift (A,Q)
        A = (A << 1) | ((Q >> (bits - 1)) & 1)
        Q = (Q << 1) & ((1 << bits) - 1)
        
        # Step 2: Subtract M from A
        A = A - M
        
        print(f"Step {i+1}: After shift and subtract:")
        print(f"A = {decimal_to_binary(A, bits)}")
        print(f"Q = {decimal_to_binary(Q, bits)}")
        
        # Step 3: Check sign of A
        if A < 0:
            A = A + M  # Restore
            Q = Q & ~1  # Set Q₀ = 0
            print("A < 0 → Restored A and set Q₀ = 0")
        else:
            Q = Q | 1  # Set Q₀ = 1
            print("A ≥ 0 → Set Q₀ = 1")
        
        print(f"A = {decimal_to_binary(A, bits)}, Q = {decimal_to_binary(Q, bits)}")
        print("-" * 40)
    
    print("\nFinal Result:")
    print(f"Quotient  (Q) = {decimal_to_binary(Q, bits)} ({Q})")
    print(f"Remainder (A) = {decimal_to_binary(A, bits)} ({A})")


# Example Input
dividend = "1100"  # 12 in binary
divisor = "0011"   # 3 in binary
bits = 4

restoring_division(dividend, divisor, bits)

