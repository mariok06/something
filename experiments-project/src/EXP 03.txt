import struct
import math

def float_to_ieee754(value, bits=32):
    if bits == 32:
        packed = struct.pack('>f', value)
        as_int = int.from_bytes(packed, 'big')
        binary = format(as_int, '032b')
        hex_value = format(as_int, '08x')
    elif bits == 64:
        packed = struct.pack('>d', value)
        as_int = int.from_bytes(packed, 'big')
        binary = format(as_int, '064b')
        hex_value = format(as_int, '016x')
    else:
        raise ValueError("Bits must be 32 or 64")
    return binary, hex_value

def ieee754_to_float(bitstring):
    if len(bitstring) == 32:
        as_int = int(bitstring, 2)
        packed = as_int.to_bytes(4, 'big')
        return struct.unpack('>f', packed)[0]
    elif len(bitstring) == 64:
        as_int = int(bitstring, 2)
        packed = as_int.to_bytes(8, 'big')
        return struct.unpack('>d', packed)[0]
    else:
        raise ValueError("Bitstring must be 32 or 64 bits long")

# ---- MAIN PROGRAM ----
value = float(input("Enter a floating-point number: ")) #-13.625

b32, h32 = float_to_ieee754(value, 32)
b64, h64 = float_to_ieee754(value, 64)

print("\nIEEE 754 Representation:")
print(f"32-bit Binary : {b32[:1]} | {b32[1:9]} | {b32[9:]}")
print(f"32-bit Hex     : 0x{h32}")
print(f"64-bit Binary : {b64[:1]} | {b64[1:12]} | {b64[12:]}")
print(f"64-bit Hex     : 0x{h64}")

# Convert back to float
recovered = ieee754_to_float(b32)
print("\nRecovered float from 32-bit:", recovered)
